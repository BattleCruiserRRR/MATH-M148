score <- 0
# for every cell
for(i in seq_len(nrow(x)))
{
for(j in seq_len(ncol(x)))
{
# get expected val
exp <- (sum(x[i,]) * sum(x[,j])) / n
score <- score + (x[i,j] - exp)^2 / exp
}
}
print(paste0("score: ",score))
print(paste0("df: ", (nrow(x)-1)*(ncol(x)-1)))
print(paste0("crit val based on df and sig level of ",sig_level, ": ", qchisq(sig_level,(nrow(x)-1)*(ncol(x)-1),lower.tail = F)))
}
test_of_independence(x)
math <- c(8,14,15,6)
bio <- c(15,19,4,5)
other <- c(13,15,7,6)
x <- math %>% rbind(bio,other) %>% t()
test_of_independence <- function(x, sig_level = 0.05)
{
# total cases
n <- sum(x)
# score
score <- 0
# for every cell
for(i in seq_len(nrow(x)))
{
for(j in seq_len(ncol(x)))
{
# get expected val
exp <- (sum(x[i,]) * sum(x[,j])) / n
score <- score + (x[i,j] - exp)^2 / exp
}
}
print(paste0("score: ",score))
print(paste0("df: ", (nrow(x)-1)*(ncol(x)-1)))
print(paste0("crit val based on df and sig level of ",sig_level, ": ", qchisq(sig_level,(nrow(x)-1)*(ncol(x)-1),lower.tail = F)))
}
test_of_independence(x)
nausea <- c(52,35,37,52)
patients <- c(85,67,85,152)
no_nausea <- patients - nausea
no_nausea
nausea <- c(52,35,37,52)
patients <- c(85,67,85,152)
no_nausea <- patients - nausea
x <- nausea %>% rbind(no_nausea)
x
nausea <- c(52,35,37,52)
patients <- c(85,67,85,152)
no_nausea <- patients - nausea
x <- nausea %>% rbind(no_nausea)
test_of_homogeneity(x)
x <- chinese %>% t() %>% cbind(jewish %>% t())
chinese <- c(55,33,70,49)
jewish <- c(141,145,139,161)
x <- chinese %>% t() %>% cbind(jewish %>% t())
x
chinese
chinese %>% t()
x <- chinese %>% t() %>% cbind(jewish %>% t()) %>% data.frame()
x
jewish %>% t()
chinese %>% t() %>% data.frame()
chinese %>% data.frame()
x <- chinese %>% data.frame() %>% cbind(jewish)
x
test_of_homogeneity(x)
help("chisq.test")
x <- fighters %>% data.frame() %>% transports %>% not_fly
fighters <- c(51,38)
transports <- c(14,16)
not_fly <- c(38,46)
x <- fighters %>% data.frame() %>% transports %>% not_fly
x <- fighters %>% data.frame() %>% cbind(transports) %>% cbind(not_fly)
x
x <- fighters %>% data.frame() %>% rbind(transports) %>% rbind(not_fly)
x
fighters
fighters %>% data.frame()
x <- fighters %>% t() %>% data.frame() %>% rbind(transports) %>% rbind(not_fly)
x
x <- x %>% t()
x
test_category <- x %>% t()
test_offspring <- x
test_offspring
test_category
fighters <- c(51,38)
transports <- c(14,16)
not_fly <- c(38,46)
x <- fighters %>% t() %>% data.frame() %>% rbind(transports) %>% rbind(not_fly)
test_category <- x %>% t()
test_offspring <- x
test_category
test_of_independence(test_category)
exp <- 105.37 - 100
test_offspring
obs <- test_offspring$X1 - test_offspring$X2
exp <- 105.37 - 100
obs <- test_offspring$X1 - test_offspring$X2
obs
exp
obs - exp
(obs - exp)^2
(obs - exp)^2/exp
x <- sum((obs - exp)^2/exp)
x
test_offspring
test_offspring %>% rename(female = X1, male = X2)
test_offspring <- test_offspring %>% rename(female = X1, male = X2)
obs <- c(sum(test_offspring$female),sum(test_offspring$male))
obs <- c(sum(test_offspring$female),sum(test_offspring$male))
obs
test_offspring <- test_offspring %>% rename(female = X1, male = X2)
fighters <- c(51,38)
transports <- c(14,16)
not_fly <- c(38,46)
x <- fighters %>% t() %>% data.frame() %>% rbind(transports) %>% rbind(not_fly)
test_category <- x %>% t()
test_offspring <- x
test_of_independence(test_category)
test_offspring <- test_offspring %>% rename(female = X1, male = X2)
test_offspring
fighters <- c(51,38)
transports <- c(14,16)
not_fly <- c(38,46)
x <- fighters %>% t() %>% data.frame() %>% rbind(transports) %>% rbind(not_fly)
test_category <- x %>% t()
test_offspring <- x
test_of_independence(test_category)
test_offspring <- test_offspring %>% rename(female = X1, male = X2)
obs <- c(sum(test_offspring$female),sum(test_offspring$male))
male_rate <- 105.37 / (105.37 + 100)
female_rate <- 100 / (105.37 + 100)
exp <- c(obs[1]*female_rate, obs[2]*male_rate)
obs
exp
obs
obs <- c(sum(test_offspring$female)/sum(test_offspring),sum(test_offspring$male)/sum(test_offspring))
male_rate <- 105.37 / (105.37 + 100)
female_rate <- 100 / (105.37 + 100)
exp <- c(obs[1]*female_rate, obs[2]*male_rate)
exp
obs
sum((obs - exp)^2/exp)
qchisq
crit_val <- qchisq(0.05,df = length(obs) - 1, lower.tail = F)
crit_val
obs <- c(sum(test_offspring$female),sum(test_offspring$male))
male_rate <- 105.37 / (105.37 + 100)
female_rate <- 100 / (105.37 + 100)
exp <- c(obs[1]*female_rate, obs[2]*male_rate)
crit_val <- qchisq(0.05,df = length(obs) - 1, lower.tail = F)
crit_val
x <- sum((obs - exp)^2/exp)
x
obs <- c(sum(test_offspring$female),sum(test_offspring$male))
male_rate <- 105.37 / (105.37 + 100)
female_rate <- 100 / (105.37 + 100)
exp <- c(sum(obs)*female_rate, sum(obs)*male_rate)
crit_val <- qchisq(0.05,df = length(obs) - 1, lower.tail = F)
crit_val
x <- sum((obs - exp)^2/exp)
x
exp
obs
crit_val
x
obs <- c(sum(test_offspring$female),sum(test_offspring$male))
male_rate <- 105.37 / (105.37 + 100)
female_rate <- 100 / (105.37 + 100)
exp <- c(sum(obs)*female_rate, sum(obs)*male_rate)
crit_val <- qchisq(0.05,df = length(obs) - 1, lower.tail = F)
crit_val
x <- sum((obs - exp)^2/exp)
x
mcnemar.test
help("mcnemar.test")
x <- matrix(c(4,9,50,1165), nrow = 2, ncol = 2)
x
x <- matrix(c(4,50,9,1165), nrow = 2, ncol = 2)
x
x <- matrix(c(4,50,9,1165), nrow = 2, ncol = 2)
# input takes contigency table already
mcnemar_test <- function(x,sig.level = 0.05)
{
score <- (x[1,2]-x[2,1])^2/x[1,2]+x[2,1]
print(paste0("score: ",score))
print(paste0("df: ", (nrow(x)-1)*(ncol(x)-1)))
print(paste0("crit val based on df and sig level of ",sig_level, ": ", qchisq(sig_level,(nrow(x)-1)*(ncol(x)-1),lower.tail = F)))
}
mcnemar_test(x)
x <- matrix(c(4,50,9,1165), nrow = 2, ncol = 2)
# input takes contigency table already
mcnemar_test <- function(x,sig_level = 0.05)
{
score <- (x[1,2]-x[2,1])^2/x[1,2]+x[2,1]
print(paste0("score: ",score))
print(paste0("df: ", (nrow(x)-1)*(ncol(x)-1)))
print(paste0("crit val based on df and sig level of ",sig_level, ": ", qchisq(sig_level,(nrow(x)-1)*(ncol(x)-1),lower.tail = F)))
}
mcnemar_test(x)
x <- matrix(c(4,50,9,1165), nrow = 2, ncol = 2)
# input takes contigency table already
mcnemar_test <- function(x,sig_level = 0.05)
{
score <- (x[1,2]-x[2,1])^2/(x[1,2]+x[2,1])
print(paste0("score: ",score))
print(paste0("df: ", (nrow(x)-1)*(ncol(x)-1)))
print(paste0("crit val based on df and sig level of ",sig_level, ": ", qchisq(sig_level,(nrow(x)-1)*(ncol(x)-1),lower.tail = F)))
}
mcnemar_test(x)
x <- matrix(c(128,19,7,7), nrow = 2, ncol = 2) %>% data.frame()
mcnemar_test(x)
x <- matrix(c(128,19,7,7), nrow = 2, ncol = 2) %>% data.frame()
mcnemar_test(x)
male_prop <- 78/(78+94)
female_prop <- 50/(50+89)
male_prop
male_prop <- 78/(78+94)
female_prop <- 50/(50+89)
male_prop
female_prop
x <- matrix(c(78,50,94,89), nrow = 2, ncol = 2) %>% data.frame()
x <- matrix(c(78,50,94,89), nrow = 2, ncol = 2) %>% data.frame()
x
x <- matrix(c(78,50,94,89), nrow = 2, ncol = 2) %>% data.frame()
test_of_independence(x)
x <- matrix(c(13,115,37,146), 2,2) %>% data.frame()
test_of_independence(x)
mcnemar_test(x)
x <- matrix(c(13,115,37,146), 2,2) %>% data.frame()
test_of_independence(x)
odds_male <- 78/94
odds_female <- 50/89
odds_male
odds_female
odds_male <- 78/94
odds_female <- 50/89
odds_male/odds_female
odds_smoker <- 13/37
odds_non <- 115/146
odds_smoker/odds_non
odds_smoker
odds_non
x <- matrix(c(12,4,5,9)2,2) %>% data.frame()
x <- matrix(c(12,4,5,9),2,2) %>% data.frame()
x
x <- matrix(c(12,4,5,9),2,2) %>% data.frame()
sum(x)
x <- matrix(c(12,4,5,9),2,2) %>% data.frame()
prob <- numeric(0)
for(i in seq_len(x[1,1]+x[1,2]))
{
# make probability vector
prob <- c(prob,choose(x[1,1]+x[2,1],i) * choose(x[1,2]+x[2,2],x[1,1]+x[1,2]-i) / choose(sum(x),x[1,1]+x[1,2]))
}
prob
prob %>% filter(prob <= crit_prob)
prob
prob %>% data.frame()
prob %>% data.frame() %>% filter(. <= crit_prob)
crit_prob <- choose(x[1,1]+x[2,1],x[1,1]) * choose(x[1,2]+x[2,2],x[1,1]+x[1,2]-x[1,1]) / choose(sum(x),x[1,1]+x[1,2])
prob %>% data.frame() %>% filter(. <= crit_prob)
prob
prob %>% data.frame() %>% filter(. <= crit_prob)
prob %>% data.frame() %>% filter(. <= crit_prob) %>% sum()
# libraries and directory set up
setwd("C:/Users/lavil/source/repos/LukVill/MATH-M148")
library(tidyverse)
library(lubridate)
library(hms)
# dataset set up
luke_export_dir <- 'C:/Users/lavil/source/repos/LukVill/Misc Data/export.csv'
# this is based off of Luke's directory!!! #
export_head <- read_csv(luke_export_dir, n_max = 1000)
# this is based off of Luke's directory!!! #
export <- read_csv(luke_export_dir)
192/12
export_head
# journeys that have 1 step
export_head %>% group_by(customer_id, account_id) %>% filter(journey_steps_until_end == 1)
export_head %>% filter(customer_id == -784961211)
# journeys that have 1 step
export_head %>% group_by(customer_id, account_id) %>% filter(sum(journey_steps_until_end) == 1)
export_head %>% filter(customer_id == 1483781929)
export_head %>% filter(customer_id == 1483781929)
# journeys that have 1 step
export %>% group_by(customer_id, account_id) %>% filter(sum(journey_steps_until_end) == 1)
# journeys that have 1 step
apporved_cust <- export %>% group_by(customer_id, account_id) %>% filter(sum(journey_steps_until_end) == 1)
apporved_cust
apporved_cust %>% group_by(ed_id) %>% count()
export_head
# filter out duplicate events on the same date
export_head %>% distinct(event_timestamp)
# filter out duplicate events on the same date
export_head %>% unique(event_timestamp)
help("distinct")
# filter out duplicate events on the same date
export_head %>% distinct(event_timestamp, .keep_all = TRUE)
export_head
9.43/sqrt(10)
sqrt(10)
9.43/3.162278
10*90/100
0.43/5
qnorm(1)
qbern
qbinom(1,25,0.24,lower.tail = T)
qbinom(1.96,25,0.24,lower.tail = T)
qbinom(1.96,25,0.24,lower.tail = F)
qbinom(1,25,0.24,lower.tail = F)
qbinom(1.25,0.24,lower.tail = F)
qbinom(1,25,0.24,lower.tail = F)
pbinom(1,25,0.24, lower.tail=F)
pbinom(0.5,25,0.24, lower.tail=F)
pbinom(0.5,25,0.24, lower.tail=T)
pbinom(1,25,0.24, lower.tail=T)
pbinom(0.5,1,0.5)
pbinom(0.5,2,0.5)
pbinom(0.5,25,0.5)
pnorm(1)
pnorm(2)
pnorm(1,lower.tail = T)
pnorm(1,lower.tail = F)
pnorm(1,lower.tail = F)
pnorm(1.96,lower.tail = F)
qnorm(0.05,lower.tail = F)
qnorm(0.025,lower.tail = F)
qnorm(0.025,lower.tail = T)
qnorm(0.025,lower.tail = T)
pnorm(1.95)
pnorm(1)
export_head
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
export_head <- export_head %>% distinct(customer_id, account_id, event_timestamp, .keep_all = TRUE)
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, n_max = 1000)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
export_head %>% distinct(customer_id, account_id, event_timestamp, .keep_all = TRUE)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
export_head %>% filter(customer_id == -784961211)
export_head
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
print(export_head %>% filter(customer_id == -784961211), n = 100)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
print(export_head, n = 100)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
print(export_head %>% filter(customer_id == 15849251), n = 100)
export_head %>% filter(customer_id == 15849251) %>% distinct(customer_id, account_id, event_timestamp, .keep_all = TRUE)
export_head %>% filter(customer_id == 15849251)
export_head %>% filter(customer_id == 15849251)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
print(export_head %>% filter(customer_id == 15849251), n = 100)
print(export_head %>% filter(customer_id == 15849251) %>% distinct(customer_id, account_id, event_timestamp, .keep_all = TRUE), n = 100)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
print(export_head %>% filter(customer_id == 15849251), n = 100)
print(export_head %>% filter(customer_id == 15849251) %>% distinct(customer_id, account_id, event_timestamp, .keep_all = TRUE), n = 100)
export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp)
export_head %>% filter(customer_id == 15849251)  %>% pull(as.numeric(event_timestamp))
export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric()
export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric() %>% distinct()
export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric() %>% unique()
unique(c(1,2,3,1,1))
export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric() %>% unique()
export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric() %>% unique()
test <- export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric() %>% unique()
test[86]
test[86] == test[87]
test[86]
test[87]
test[86] == test[85]
test[85]
format
help(format)
test[86] >= test[85]
format(test[86], digits = 10)
format(test[86], nsmall = 10)
format(test[85], nsmall = 10)
test[86]
test[85]
format(test[85], nsmall = 10)
format(test[86], nsmall = 10)
export_head
export_head %>% filter(customer_id == 15849251)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of )
print(export_head %>% filter(customer_id == 15849251), n = 100)
test <- export_head %>% filter(customer_id == 15849251)  %>% pull(event_timestamp) %>% as.numeric() %>% unique()
test
typeof(test[86])
test[86] >= test[85]
all.equal(test[86],test[85])
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get year, month, day, time
export_head %>% mutate(date = date(event_timestamp))
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get year, month, day, time
print(export_head %>% mutate(date = date(event_timestamp)))
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get year, month, day, time
test <- export_head %>% mutate(date = date(event_timestamp))
test
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get year, month, day, time
test <- export_head %>% mutate(date = date(event_timestamp)) %>% select(date)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get year, month, day, time
export_head %>% mutate(date = date(event_timestamp)) %>% select(date)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get date and time
export_head %>% mutate(time = time(event_timestamp)) %>% select(time)
export_head %>% mutate(time = as_hms(event_timestamp)) %>% select(time)
export_head
export_head %>% mutate(time = as_hms(event_timestamp)) %>% select(time)
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, n_max = 1000)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get date and time
export_head <- export_head %>% mutate(date = date(event_timestamp), time = as_hms(event_timestamp))
# based on date, time, customer, and account, filter distinct
export_head %>% distinct(customer_id,account_id,date,time)
# based on date, time, customer, and account, filter distinct
print(export_head %>% distinct(customer_id,account_id,date,time), n = 100)
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, n_max = 1000)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get date and time and seconds
export_head <- export_head %>% mutate(date = date(event_timestamp), time = as_hms(event_timestamp), seconds = second(event_timestamp))
export_head
# based on date, time, customer, and account, filter distinct
print(export_head %>% distinct(customer_id,account_id,date,time,seconds), n = 100)
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, n_max = 1000)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get date and time and seconds
export_head <- export_head %>% mutate(date = date(event_timestamp), time = as_hms(event_timestamp), seconds = trunc(second(event_timestamp)))
# based on date, time, customer, and account, filter distinct
print(export_head %>% filter(customer_id == 15849251), n = 100)
print(export_head %>% distinct(customer_id,account_id,date,time,seconds), n = 100)
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, n_max = 1000)
# INITIAL DATA CLEANUP
# filter out duplicate events on the same event timestamp (based off of same event stamp and customer and account)
# mutate to get date and time and seconds
export_head <- export_head %>% mutate(date = date(event_timestamp),
hours = hour(event_timestamp),
mins = minute(event_timestamp),
secs = trunc(second(event_timestamp)))
# based on date, time, customer, and account, filter distinct
print(export_head %>% filter(customer_id == 15849251), n = 100)
print(export_head %>% distinct(customer_id,account_id,date,hours,mins,secs), n = 100)
print(export_head %>% distinct(customer_id,account_id,date,hours,mins,secs, .keep_all = T), n = 100)
library(arules)
install.packages("arules")
install.packages("arulesViz")
export_head %>%
distinct(customer_id,account_id,event_timestamp,date,hours,mins,secs, .keep_all = T)
export_head
print(export_head, n = 100)
con <- dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
install.packages("odbc")
install.packages("DBI")
install.packages("DBI")
con <- dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
help(dbconnect)
con <- DBI::dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
library(tidyverse)
library(DBI)
library(dbplyr)
library(odbc)
con <- dbplyr::dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
con <- dbi::dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
con <- DBI::dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
install.packages("rsqlite")
install.packages("RSQLite")
con <- DBI::dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
11.99 * 0.9
0.67*2
34*2
68/50
1.36/2
1/0.1
sqrt(10)
