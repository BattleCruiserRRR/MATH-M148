prob
prob %>% filter(prob <= crit_prob)
prob
prob %>% data.frame()
prob %>% data.frame() %>% filter(. <= crit_prob)
crit_prob <- choose(x[1,1]+x[2,1],x[1,1]) * choose(x[1,2]+x[2,2],x[1,1]+x[1,2]-x[1,1]) / choose(sum(x),x[1,1]+x[1,2])
prob %>% data.frame() %>% filter(. <= crit_prob)
prob
prob %>% data.frame() %>% filter(. <= crit_prob)
prob %>% data.frame() %>% filter(. <= crit_prob) %>% sum()
# libraries and directory set up
setwd("C:/Users/lavil/source/repos/LukVill/MATH-M148")
library(tidyverse)
library(lubridate)
library(hms)
library(arules)
library(arulesViz)
library(data.table)
# event definition set up
event_def <- "Event Definitions.csv"
# dataset set up
luke_export_dir <- 'C:/Users/lavil/source/repos/LukVill/Misc Data/export_no_dup.csv'
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, nrows = 1000)
# vector of all days from earliest to latest (11-03-20 to 09-20-23)
date_vector <- seq(as.Date("2020-11-03"),as.Date("2023-09-20"), by = "days") %>%
data.frame() %>% rename("dates" = ".")
# count ed per day, pivot wider to get hot-esque notation, right join into date_vector
# mutate each column to replace na's, mutate each col to cumsum
indv_df <- export_head %>% group_by(date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("date" = "dates")) %>% arrange(date) %>%
mutate(across(-0, ~replace_na(.x, 0))) %>%
pivot_longer(cols = -date, names_to = "ed_id", values_to = "count") %>% ungroup() %>%
group_by(ed_id) %>% arrange(date) %>% mutate(total = cumsum(count))
export_head
export_head <- export_head %>% select(-1)
export_head
# count ed per day, pivot wider to get hot-esque notation, right join into date_vector
# mutate each column to replace na's, mutate each col to cumsum
indv_df <- export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("date" = "dates")) %>% arrange(date) %>%
mutate(across(-0, ~replace_na(.x, 0))) %>%
pivot_longer(cols = -Date, names_to = "ed_id", values_to = "count") %>% ungroup() %>%
group_by(ed_id) %>% arrange(Date) %>% mutate(total = cumsum(count))
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %
export_head %>% group_by(Date,ed_id) %>% count()
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0)
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("date" = "dates")) %>% arrange(date)
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates")) %>% arrange(date)
# vector of all days from earliest to latest (11-03-20 to 09-20-23)
date_vector <- seq(as.IDate("2020-11-03"),as.IDate("2023-09-20"), by = "days") %>%
data.frame() %>% rename("dates" = ".")
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates"))
#date_vector %>% colnames()
class(export_head$Date)
class(date_vector)
date_vector
# vector of all days from earliest to latest (11-03-20 to 09-20-23)
date_vector <- seq(as.IDate("2020-11-03"),as.IDate("2023-09-20"), by = "days") %>%
data.frame() %>% rename("dates" = ".")
#date_vector %>% colnames()
class(export_head$Date)
class(date_vector)
class(date_vector$dates)
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates")) %>% arrange(date)
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0)
date_vector
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates"))
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
inner_join(date_vector, by = c("Date" = "dates"))
export_head$Date[1]
date_vector$dates[1]
export_head$Date
date_vector$dates[1]
class(date_vector$dates[50])
date_vector$dates[50]
date_vector$dates[500]
date_vector$dates[300]
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates"))
date_vector
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates"))
#date_vector %>% colnames()
as.Date(as.IDate("2020-11-03"))
typeof(export_head)
typeof(export_head$Time)
typeof(export_head$Date)
class(export_head$Time)
class(export_head$Date)
export_head$Date <- as.Date(export_head$Date)
# vector of all days from earliest to latest (11-03-20 to 09-20-23)
date_vector <- seq(as.Date("2020-11-03"),as.Date("2023-09-20"), by = "days") %>%
data.frame() %>% rename("dates" = ".")
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates"))
export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates")) %>% arrange(Date) %>%
mutate(across(-0, ~replace_na(.x, 0))) %>%
pivot_longer(cols = -Date, names_to = "ed_id", values_to = "count") %>% ungroup() %>%
group_by(ed_id) %>% arrange(Date) %>% mutate(total = cumsum(count))
# count ed per day, pivot wider to get hot-esque notation, right join into date_vector
# mutate each column to replace na's, mutate each col to cumsum
indv_df <- export_head %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates")) %>% arrange(Date) %>%
mutate(across(-0, ~replace_na(.x, 0))) %>%
pivot_longer(cols = -Date, names_to = "ed_id", values_to = "count") %>% ungroup() %>%
group_by(ed_id) %>% arrange(Date) %>% mutate(total = cumsum(count))
# make legend based on highest total
legend_ordered <- indv_df %>% filter(date == as.Date("2023-09-20")) %>% arrange(desc(total)) %>% pull(ed_id)
# make legend based on highest total
legend_ordered <- indv_df %>% filter(Date == as.Date("2023-09-20")) %>% arrange(desc(total)) %>% pull(ed_id)
# update ed_id to be factor based on ordered legen
indv_df$ed_id <- factor(indv_df$ed_id, levels = legend_ordered)
# make graph based on x = date, y = total, color = ed_id
indv_graph <- indv_df %>% ggplot(aes(x = Date, y = total, color = ed_id)) +
geom_line() + theme_minimal() + scale_x_date(date_breaks = "3 months") + scale_color_manual(values = c("#5d8d00",
"#ac67ff",
"#00cd2f",
"#ff42ae",
"#7bdc6e",
"#704b89",
"#ffb11d",
"#0fbcff",
"#ff5629",
"#00cfc6",
"#9d392e",
"#006e1b",
"#d5b1ff",
"#b1d263",
"#006e91",
"#a27d00",
"#c2bce2",
"#456239",
"#a7d29a"), name = "Event IDs (ordered)") +
labs(title = "Cumulative Total Frequencies of Events", x = "Date", y = "Total", legend = "test") +
theme(legend.spacing.y = unit(0.01, 'in')) +
guides(fill = guide_legend(byrow = TRUE)) + theme(axis.text.x = element_text(angle = 90))
indv_graph
export <- fread(luke_export_dir)
export <- export %>% select(-1)
export$Date <- as.Date(export$Date)
glimpse(export)
# vector of all days from earliest to latest (11-03-20 to 09-20-23)
date_vector <- seq(as.Date("2020-11-03"),as.Date("2023-09-20"), by = "days") %>%
data.frame() %>% rename("dates" = ".")
# count ed per day, pivot wider to get hot-esque notation, right join into date_vector
# mutate each column to replace na's, mutate each col to cumsum
indv_df <- export %>% group_by(Date,ed_id) %>% count() %>%
pivot_wider(names_from = ed_id, values_from = n, values_fill = 0) %>%
right_join(date_vector, by = c("Date" = "dates")) %>% arrange(Date) %>%
mutate(across(-0, ~replace_na(.x, 0))) %>%
pivot_longer(cols = -Date, names_to = "ed_id", values_to = "count") %>% ungroup() %>%
group_by(ed_id) %>% arrange(Date) %>% mutate(total = cumsum(count))
# make legend based on highest total
legend_ordered <- indv_df %>% filter(Date == as.Date("2023-09-20")) %>% arrange(desc(total)) %>% pull(ed_id)
# update ed_id to be factor based on ordered legen
indv_df$ed_id <- factor(indv_df$ed_id, levels = legend_ordered)
# make graph based on x = date, y = total, color = ed_id
indv_graph <- indv_df %>% ggplot(aes(x = Date, y = total, color = ed_id)) +
geom_line() + theme_minimal() + scale_x_date(date_breaks = "3 months") + scale_color_manual(values = c("#5d8d00",
"#ac67ff",
"#00cd2f",
"#ff42ae",
"#7bdc6e",
"#704b89",
"#ffb11d",
"#0fbcff",
"#ff5629",
"#00cfc6",
"#9d392e",
"#006e1b",
"#d5b1ff",
"#b1d263",
"#006e91",
"#a27d00",
"#c2bce2",
"#456239",
"#a7d29a"), name = "Event IDs (ordered)") +
labs(title = "Cumulative Total Frequencies of Events", x = "Date", y = "Total", legend = "test") +
theme(legend.spacing.y = unit(0.01, 'in')) +
guides(fill = guide_legend(byrow = TRUE)) + theme(axis.text.x = element_text(angle = 90))
indv_graph
# make graph based on x = date, y = total, color = ed_id
indv_graph <- indv_df %>% ggplot(aes(x = Date, y = total, color = ed_id)) +
geom_line() + theme_minimal() + scale_x_date(date_breaks = "3 months") + scale_color_manual(
values = c("#b00086",
"#c4cf17",
"#ff49f9",
"#01a261",
"#ac00bb",
"#72daa2",
"#de75ff",
"#27672b",
"#0064e6",
"#ffaf50",
"#b197ff",
"#575f14",
"#ff3890",
"#28daec",
"#d20053",
"#00675e",
"#ff7cc9",
"#944a00",
"#016d9b",
"#a6310f",
"#f4aff3",
"#ebbf85",
"#834283",
"#b0ac87",
"#a52f35",
"#675b7b",
"#ff7189",
"#8f405b"),
name = "Event IDs (ordered)") +
labs(title = "Cumulative Total Frequencies of Events", x = "Date", y = "Total", legend = "test") +
theme(legend.spacing.y = unit(0.01, 'in')) +
guides(fill = guide_legend(byrow = TRUE)) + theme(axis.text.x = element_text(angle = 90))
indv_graph
library(scales)
# make graph based on x = date, y = total, color = ed_id
indv_graph <- indv_df %>% ggplot(aes(x = Date, y = total, color = ed_id)) +
geom_line() + theme_minimal() + scale_x_date(date_breaks = "3 months") + scale_color_manual(
values = c("#b00086",
"#c4cf17",
"#ff49f9",
"#01a261",
"#ac00bb",
"#72daa2",
"#de75ff",
"#27672b",
"#0064e6",
"#ffaf50",
"#b197ff",
"#575f14",
"#ff3890",
"#28daec",
"#d20053",
"#00675e",
"#ff7cc9",
"#944a00",
"#016d9b",
"#a6310f",
"#f4aff3",
"#ebbf85",
"#834283",
"#b0ac87",
"#a52f35",
"#675b7b",
"#ff7189",
"#8f405b"),
name = "Event IDs (ordered)") +
labs(title = "Cumulative Total Frequencies of Events", x = "Date", y = "Total", legend = "test") +
theme(legend.spacing.y = unit(0.01, 'in')) +
guides(fill = guide_legend(byrow = TRUE)) + theme(axis.text.x = element_text(angle = 90)) +
scale_x_continuous(labels = label_comma())
indv_graph
# make graph based on x = date, y = total, color = ed_id
indv_graph <- indv_df %>% ggplot(aes(x = Date, y = total, color = ed_id)) +
geom_line() + theme_minimal() + scale_x_date(date_breaks = "3 months") + scale_color_manual(
values = c("#b00086",
"#c4cf17",
"#ff49f9",
"#01a261",
"#ac00bb",
"#72daa2",
"#de75ff",
"#27672b",
"#0064e6",
"#ffaf50",
"#b197ff",
"#575f14",
"#ff3890",
"#28daec",
"#d20053",
"#00675e",
"#ff7cc9",
"#944a00",
"#016d9b",
"#a6310f",
"#f4aff3",
"#ebbf85",
"#834283",
"#b0ac87",
"#a52f35",
"#675b7b",
"#ff7189",
"#8f405b"),
name = "Event IDs (ordered)") +
labs(title = "Cumulative Total Frequencies of Events", x = "Date", y = "Total", legend = "test") +
theme(legend.spacing.y = unit(0.01, 'in')) +
guides(fill = guide_legend(byrow = TRUE)) + theme(axis.text.x = element_text(angle = 90)) +
scale_y_continuous(labels = label_comma())
indv_graph
event_def
# event definition set up
event_def <- fread("Event Definitions.csv")
event_def
export %>% filter(ed_id == 1)
export %>% filter(ed_id == 5)
export %>% filter(ed_id == 19)
export %>% filter(ed_id == 21)
#date_vector %>% colnames()
export_head %>% group_by(Date,ed_id) %>% count()
export_head
# make dataframe for apriori algorithm
export_head %>% group_by(customer_id, account_id, ed_id) %>% count()
# make dataframe for apriori algorithm
export_head %>% group_by(customer_id, account_id, ed_id) %>% count()
library(tidyverse)
library(lubridate)
library(hms)
library(arules)
library(arulesViz)
library(data.table)
library(scales)
# get max journey length
export_head
# dataset set up
luke_export_dir <- 'C:/Users/lavil/source/repos/LukVill/Misc Data/export_no_dup.csv'
# this is based off of Luke's directory!!! #
export_head <- fread(luke_export_dir, nrows = 1000)
export_head
# make journey step col again lol
export_head %>% group_by(customer_id, account_id) %>% count()
# make journey step col again lol
export_head %>% arrange(customer_id,account_id)
# make journey step col again lol
export_head %>% arrange(customer_id,account_id, date, time)
# make journey step col again lol
export_head %>% arrange(customer_id,account_id,Date,Time)
source("C:/Users/lavil/source/repos/LukVill/MATH-M148/luke_files/luke_data_prep_model_learning.R", echo=TRUE)
# for each customer
export %>% group_by(customer_id, account_id) %>% count()
# get max journey length
# group by customer and account, get highest count
export %>% group_by(customer_id,account_id) %>% count() %>% select(n) %>% max()
# get max journey length
# group by customer and account, get highest count
export %>% group_by(customer_id,account_id) %>% count() %>% ungroup() %>% select(n) %>% max()
# make dataframe of customer/acct and their event lists
# get each unique customer account pairs and make into dataframe
export %>% group_by(customer_id,account_id) %>% select(customer_id,account_id)
# make dataframe of customer/acct and their event lists
# get each unique customer account pairs and make into dataframe
export %>% group_by(customer_id,account_id) %>% select(customer_id,account_id) %>% distinct()
export %>% select(customer_id) %>% distinct()
# make dataframe of customer/acct and their event lists
# get each unique customer account pairs and make into dataframe
export %>% group_by(customer_id,account_id) %>% select(customer_id,account_id) %>% distinct()
# make dataframe of customer/acct and their event lists
# get each unique customer account pairs and make into dataframe
res <- export %>% group_by(customer_id,account_id) %>% select(customer_id,account_id) %>% distinct()
res
# make dataframe of customer/acct and their event lists
# get each unique customer account pairs and make into dataframe
res <- export %>% group_by(customer_id,account_id) %>%
select(customer_id,account_id) %>% distinct() %>% as.data.frame()
res
0.01575 * 5000
event_def
export$ed_id %>% unique()
export_head %>% filter(ed_id == 9)
export_head
export_head %>% filter(ed_id == 9)
export_head
export_head %>% filter(ed_id %in% c(23,24))
export_head %>% filter(ed_id == 23 | ed_id == 24)
event_def
export_head %>% filter(ed_id == 23 | ed_id == 24)
event_def
glimpse(event_def)
data(event_def)
view(event_def)
export_head %>% filter(ed_id == 18 | ed_id == 7)
export_head %>% filter(ed_id == 29)
# get customers that ordered but did not activate account
export_head %>% filter(ed_id == 18 | ed_id == 7)
# get customers that ordered but did not activate account
export_head %>% filter(ed_id == 18 | ed_id == 7) %>%
select(customer_id,account_id) %>% distinct()
5 %in% c(5,2)
c(1,2,3,4,5) %in% c(2,4,6)
# get customers that ordered but did not activate account
order_cust <- export_head %>% filter(ed_id == 18 | ed_id == 7) %>%
select(customer_id,account_id) %>% distinct()
order_cust
export_head
export_head %>% filter(customer_id %in% order_cust$customer_id & ed_id == 29)
order_cust
export_head %>% filter(customer_id %in% order_cust$customer_id & ed_id != 29)
export_head %>% filter(customer_id %in% order_cust$customer_id & ed_id == 29)
# get customers that ordered but did not activate account
order_cust <- export_head %>% filter(ed_id == 18 | ed_id == 7) %>%
select(customer_id) %>% distinct()
# customers that ordered and activate
export_head %>% filter(customer_id %in% order_cust & ed_id == 29) %>%
select(customer_id)
order_cust
# customers that ordered and activate
export_head %>% filter(customer_id %in% order_cust$customer_id & ed_id == 29) %>%
select(customer_id)
# customers who ordered but not activate
order_act_cust %>% anti_join(order_cust, by = "customer_id")
# customers that ordered and activate
order_act_cust <- export_head %>% filter(customer_id %in% order_cust$customer_id & ed_id == 29) %>%
select(customer_id)
# customers who ordered but not activate
order_act_cust %>% anti_join(order_cust, by = "customer_id")
order_cust
order_act_cust
# customers who ordered but not activate
order_act_cust %>% outer_join(order_cust, by = "customer_id")
# customers who ordered but not activate
order_act_cust %>% union(order_cust)
c(1,2,3,4,5) %>% union(c(2,4,6))
c(2,4,6) %>% union(c(1,2,3,4,5))
# customers who ordered but not activate
order_act_cust %>% intersect(order_cust)
# customers who ordered but not activate
order_cust %>% filter(customer_id %in% order_act_cust)
order_act_cust
order_cust
c(1,2,3,4) %in% c(2,4)
order_cust$customer_id %in% order_act_cust
order_cust$customer_id
order_act_cust
order_cust$customer_id %in% order_act_cust$customer_id
# customers who ordered but not activate
order_cust %>% filter(customer_id %in% order_act_cust$customer_id)
# customers who ordered but not activate
order_cust %>% filter(!(customer_id %in% order_act_cust$customer_id))
export %>% filter(customer_id == 1677995646)
# this is based off of Luke's directory!!! #
export <- fread(luke_export_dir)
# get customers that ordered but did not activate account
# cust ordered
order_cust <- export_head %>% filter(ed_id == 18 | ed_id == 7) %>%
select(customer_id) %>% distinct()
# customers that ordered and activate
order_act_cust <- export_head %>% filter(customer_id %in% order_cust$customer_id & ed_id == 29) %>%
select(customer_id)
# customers who ordered but not activate
order_noAct_cust <- order_cust %>% filter(!(customer_id %in% order_act_cust$customer_id))
order_noAct_cust
# get customers that ordered but did not activate account
# cust ordered
order_cust <- export %>% filter(ed_id == 18 | ed_id == 7) %>%
select(customer_id) %>% distinct()
# customers that ordered and activate
order_act_cust <- export %>% filter(customer_id %in% order_cust$customer_id & ed_id == 29) %>%
select(customer_id)
# customers who ordered but not activate
order_noAct_cust <- order_cust %>% filter(!(customer_id %in% order_act_cust$customer_id))
order_noAct_cust
export %>% filter(customer_id == 2122397824)
event_def
# libraries
install.packages("RSQLite")
install.packages("RSQLite")
# libraries
install.packages("DBI")
install.packages("DBI")
# libraries
library(RSQLite)
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "TYSQL.sqlite")
# libraries
library(RSQLite)
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "TYSQL.sqlite")
knitr::opts_chunk$set(echo = TRUE, comment = "")
library(RSQLite)
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "TYSQL.sqlite")
select * from Orders
df_inner
df
df
# libraries
library(RSQLite)
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "TYSQL.sqlite")
# libraries
library(RSQLite)
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "TYSQL.sqlite")
# libraries
library(RSQLite)
library(DBI)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "TYSQL.sqlite")
